<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Pre√ßo por Unidade</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="manifest" href="manifest.json">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }
        .container {
            width: 100%;
            max-width: 420px;
            background-color: #ffffff;
            border-radius: 1.5rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
            padding: 2rem;
            text-align: center;
        }
        input, select {
            border: 2px solid #e5e7eb;
            border-radius: 0.75rem;
            padding: 0.75rem;
            font-size: 1rem;
            width: 100%;
            transition: all 0.2s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }
        .result-box {
            background-color: #d1fae5;
            color: #059669;
            border-radius: 1.5rem;
            padding: 1.5rem 1rem;
            margin-top: 2rem;
        }
        .result-text {
            font-size: 1.25rem;
            font-weight: 600;
        }
        .result-price {
            font-size: 2.5rem;
            font-weight: 700;
            line-height: 1;
            margin-top: 0.5rem;
        }
        .calculation-item {
            background-color: #fff;
            border: 2px solid #e5e7eb;
            border-radius: 0.75rem;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.2s;
        }
        .calculation-item:hover {
            border-color: #a3a3a3;
        }
        .delete-btn {
            background-color: #ef4444;
            color: #fff;
            font-weight: bold;
            border-radius: 0.5rem;
            padding: 0.5rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        .delete-btn:hover {
            background-color: #dc2626;
        }
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }
        .modal-content {
            background-color: #fff;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
            max-width: 350px;
            width: 90%;
        }
    </style>
</head>
<body>

<div class="container">
    <div id="user-info" class="text-sm text-gray-400 mb-4 text-left">
        <p>ID do Usu√°rio: <span id="user-id">Carregando...</span></p>
    </div>
    
    <h1 class="text-3xl font-bold mb-6 text-gray-800">Pre√ßo por Unidade</h1>
    
    <div class="mb-4">
        <label for="product-name" class="block text-left text-sm font-medium text-gray-700 mb-1">Nome do Produto</label>
        <input type="text" id="product-name" placeholder="Ex: Arroz, Farinha, Leite" class="w-full">
    </div>

    <div class="mb-4">
        <label for="price" class="block text-left text-sm font-medium text-gray-700 mb-1">Pre√ßo Total (R$)</label>
        <input type="number" id="price" placeholder="Ex: 15.50" class="w-full">
    </div>

    <div class="mb-4">
        <label for="quantity" class="block text-left text-sm font-medium text-gray-700 mb-1">Quantidade</label>
        <div class="flex items-center">
            <input type="number" id="quantity" placeholder="Ex: 500" class="flex-grow rounded-r-none">
            <select id="unit" class="rounded-l-none text-gray-600">
                <option value="kg">kg</option>
                <option value="g">g</option>
                <option value="L">L</option>
                <option value="ml">ml</option>
                <option value="un">un</option>
            </select>
        </div>
    </div>

    <div id="result" class="result-box hidden">
        <p class="result-text">Pre√ßo por unidade</p>
        <p id="price-per-unit" class="result-price">R$ 0,00</p>
    </div>

    <div class="flex space-x-2 mt-4">
        <button id="save-btn" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg transition duration-200 ease-in-out transform hover:-translate-y-1">
            üíæ Salvar
        </button>
    </div>
    
    <div id="saved-calculations" class="mt-6 text-left">
        <h2 class="text-xl font-semibold text-gray-700 mb-2">Seus C√°lculos Salvos</h2>
        <ul id="calculations-list" class="space-y-3"></ul>
    </div>

</div>

<!-- Custom Alert/Modal -->
<div id="modal-backdrop" class="modal-backdrop hidden">
    <div class="modal-content">
        <h3 id="modal-title" class="font-bold text-lg mb-2"></h3>
        <p id="modal-message" class="text-sm text-gray-600 mb-4"></p>
        <button id="modal-close" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">
            OK
        </button>
    </div>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, collection, addDoc, onSnapshot, doc, deleteDoc, query } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-analytics.js";

    setLogLevel('Debug');

    const appId = "noprecinho-app";
    // ATEN√á√ÉO: SUBSTITUA AS SEGUINTES CHAVES PELAS SUAS CHAVES PESSOAIS DO FIREBASE!
    // VOC√ä PODE ENCONTRAR ESSAS CHAVES NA P√ÅGINA DE CONFIGURA√á√ïES DO SEU PROJETO FIREBASE.
    const firebaseConfig = {
        apiKey: "AIzaSyB-wsClf0DUF0adE94Go3pjsPt-CyDjXf8",
        authDomain: "noprecinho-app.firebaseapp.com",
        projectId: "noprecinho-app",
        storageBucket: "noprecinho-app.firebasestorage.app",
        messagingSenderId: "525892782479",
        appId: "1:525892782479:web:fa4b83597360cf8b61a3fa",
        measurementId: "G-E0NQD2SPHH"
    };

    const initialAuthToken = undefined;

    let db;
    let auth;
    let userId;

    const priceInput = document.getElementById('price');
    const quantityInput = document.getElementById('quantity');
    const unitSelect = document.getElementById('unit');
    const productNameInput = document.getElementById('product-name');
    const saveBtn = document.getElementById('save-btn');
    const resultDiv = document.getElementById('result');
    const pricePerUnitSpan = document.getElementById('price-per-unit');
    const calculationsList = document.getElementById('calculations-list');
    const userIdDisplay = document.getElementById('user-id');

    const modalBackdrop = document.getElementById('modal-backdrop');
    const modalTitle = document.getElementById('modal-title');
    const modalMessage = document.getElementById('modal-message');
    const modalCloseBtn = document.getElementById('modal-close');

    function showModal(title, message) {
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        modalBackdrop.classList.remove('hidden');
    }

    modalCloseBtn.addEventListener('click', () => {
        modalBackdrop.classList.add('hidden');
    });

    async function initializeFirebase() {
        try {
            const app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);
            getAnalytics(app);
            
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    userIdDisplay.textContent = userId;
                    setupFirestoreListeners();
                } else {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (error) {
                        showModal("Erro de Autentica√ß√£o", "N√£o foi poss√≠vel autenticar. Por favor, verifique a chave de configura√ß√£o.");
                        console.error("Firebase auth error:", error);
                    }
                }
            });
        } catch (error) {
            showModal("Erro de Inicializa√ß√£o", "N√£o foi poss√≠vel inicializar o Firebase. Verifique sua configura√ß√£o.");
            console.error("Firebase init error:", error);
        }
    }

    function calculatePrice() {
        let price = parseFloat(priceInput.value);
        let quantity = parseFloat(quantityInput.value);
        let unit = unitSelect.value;
        let pricePerUnit = 0;
        let displayUnit = "";
        
        if (isNaN(price) || isNaN(quantity) || price <= 0 || quantity <= 0) {
            resultDiv.classList.add('hidden');
            return;
        }

        switch (unit) {
            case 'g':
                pricePerUnit = (price / quantity) * 1000;
                displayUnit = "R$/kg";
                break;
            case 'ml':
                pricePerUnit = (price / quantity) * 1000;
                displayUnit = "R$/L";
                break;
            case 'un':
                pricePerUnit = price / quantity;
                displayUnit = "R$/un";
                break;
            case 'kg':
            case 'L':
            default:
                pricePerUnit = price / quantity;
                displayUnit = `R$/${unit}`;
                break;
        }

        const formattedPrice = pricePerUnit.toFixed(2).replace('.', ',');
        pricePerUnitSpan.textContent = `${displayUnit} ${formattedPrice}`;
        resultDiv.classList.remove('hidden');
    }

    async function saveCalculation() {
        const price = parseFloat(priceInput.value);
        const quantity = parseFloat(quantityInput.value);
        const unit = unitSelect.value;
        const productName = productNameInput.value.trim();
        
        if (isNaN(price) || isNaN(quantity) || price <= 0 || quantity <= 0 || !productName) {
            showModal("Erro ao Salvar", "Por favor, preencha todos os campos corretamente para salvar.");
            return;
        }
        
        const calculationData = {
            productName: productName,
            price: price,
            quantity: quantity,
            unit: unit,
            pricePerUnit: price / quantity,
            timestamp: Date.now()
        };
        
        try {
            const path = `/artifacts/${appId}/users/${userId}/calculations`;
            await addDoc(collection(db, path), calculationData);
            showModal("Sucesso", "C√°lculo salvo com sucesso!");
        } catch (error) {
            showModal("Erro de Conex√£o", "N√£o foi poss√≠vel salvar o c√°lculo. Tente novamente.");
            console.error("Error saving document:", error);
        }
    }

    async function deleteCalculation(docId) {
        try {
            const path = `/artifacts/${appId}/users/${userId}/calculations/${docId}`;
            await deleteDoc(doc(db, path));
        } catch (error) {
            showModal("Erro ao Deletar", "N√£o foi poss√≠vel deletar o c√°lculo. Tente novamente.");
            console.error("Error deleting document:", error);
        }
    }

    function setupFirestoreListeners() {
        const path = `/artifacts/${appId}/users/${userId}/calculations`;
        const q = query(collection(db, path));

        onSnapshot(q, (snapshot) => {
            calculationsList.innerHTML = '';
            const savedItems = [];
            snapshot.forEach((doc) => {
                const data = doc.data();
                savedItems.push({
                    id: doc.id,
                    ...data
                });
            });

            savedItems.sort((a, b) => b.timestamp - a.timestamp);

            savedItems.forEach(item => {
                const li = document.createElement('li');
                li.className = 'calculation-item';
                
                const formattedPrice = (item.pricePerUnit).toFixed(2).replace('.', ',');
                let displayUnit;
                switch (item.unit) {
                    case 'g': displayUnit = 'R$/kg'; break;
                    case 'ml': displayUnit = 'R$/L'; break;
                    case 'un': displayUnit = 'R$/un'; break;
                    default: displayUnit = `R$/${item.unit}`; break;
                }

                li.innerHTML = `
                    <div>
                        <p class="font-medium text-gray-800">${item.productName}</p>
                        <p class="text-sm text-gray-600">Pre√ßo: R$ ${item.price.toFixed(2).replace('.', ',')} | Qtd: ${item.quantity} ${item.unit}</p>
                        <p class="text-sm text-blue-600 font-bold">Unidade: ${displayUnit} ${formattedPrice}</p>
                    </div>
                    <button class="delete-btn" data-id="${item.id}">X</button>
                `;
                
                const deleteBtn = li.querySelector('.delete-btn');
                deleteBtn.addEventListener('click', () => deleteCalculation(deleteBtn.dataset.id));
                
                calculationsList.appendChild(li);
            });
        }, (error) => {
            console.error("Error listening to documents:", error);
            showModal("Erro de Sincroniza√ß√£o", "N√£o foi poss√≠vel carregar seus dados. Por favor, recarregue a p√°gina.");
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        initializeFirebase();
        priceInput.addEventListener('input', calculatePrice);
        quantityInput.addEventListener('input', calculatePrice);
        unitSelect.addEventListener('change', calculatePrice);
        saveBtn.addEventListener('click', saveCalculation);
    });

    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('Service Worker registered with scope:', registration.scope);
                })
                .catch(err => {
                    console.log('Service Worker registration failed:', err);
                });
        });
    }
</script>

</body>
</html>
