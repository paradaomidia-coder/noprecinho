<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>No Precinho - Calculadora de Pre√ßo por Unidade</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="manifest" href="manifest.json">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }
        .container {
            width: 100%;
            max-width: 450px;
            background-color: #ffffff;
            border-radius: 1.5rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            text-align: center;
        }
        input, select {
            border: 2px solid #e5e7eb;
            border-radius: 0.75rem;
            padding: 0.75rem;
            font-size: 1rem;
            width: 100%;
            transition: all 0.2s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }
        .result-box {
            background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
            color: #065f46;
            border-radius: 1.5rem;
            padding: 1.5rem 1rem;
            margin-top: 2rem;
            box-shadow: 0 4px 12px rgba(5, 122, 85, 0.15);
        }
        .result-text {
            font-size: 1.25rem;
            font-weight: 600;
        }
        .result-price {
            font-size: 2.5rem;
            font-weight: 700;
            line-height: 1;
            margin-top: 0.5rem;
        }
        .calculation-item {
            background-color: #fff;
            border: 2px solid #e5e7eb;
            border-radius: 0.75rem;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.2s;
            margin-bottom: 0.75rem;
        }
        .calculation-item:hover {
            border-color: #3b82f6;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        }
        .delete-btn {
            background-color: #ef4444;
            color: #fff;
            font-weight: bold;
            border-radius: 0.5rem;
            padding: 0.5rem 0.75rem;
            cursor: pointer;
            transition: all 0.2s;
        }
        .delete-btn:hover {
            background-color: #dc2626;
            transform: scale(1.05);
        }
        .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }
        .modal-backdrop.active {
            opacity: 1;
            pointer-events: all;
        }
        .modal-content {
            background-color: #fff;
            padding: 2rem;
            border-radius: 1rem;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
            text-align: center;
            max-width: 350px;
            width: 90%;
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }
        .modal-backdrop.active .modal-content {
            transform: translateY(0);
        }
        .best-option {
            border: 2px solid #10b981;
            background-color: #ecfdf5;
        }
        .best-option-tag {
            background-color: #10b981;
            color: white;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.5rem;
            margin-left: 0.5rem;
        }
        .app-header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
        }
        .app-icon {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.5rem;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="app-header">
        <div class="app-icon">$</div>
        <h1 class="text-3xl font-bold text-gray-800">No Precinho</h1>
    </div>
    
    <div class="mb-6 p-4 bg-blue-50 rounded-xl">
        <p class="text-sm text-blue-700">Compare pre√ßos de produtos com embalagens diferentes e descubra qual op√ß√£o oferece o melhor custo-benef√≠cio!</p>
    </div>
    
    <div class="mb-4">
        <label for="product-name" class="block text-left text-sm font-medium text-gray-700 mb-1">Nome do Produto</label>
        <input type="text" id="product-name" placeholder="Ex: Arroz, Sab√£o em P√≥, Leite" class="w-full">
    </div>

    <div class="mb-4">
        <label for="price" class="block text-left text-sm font-medium text-gray-700 mb-1">Pre√ßo Total (R$)</label>
        <input type="number" id="price" placeholder="Ex: 15.50" step="0.01" min="0" class="w-full">
    </div>

    <div class="mb-4">
        <label for="quantity" class="block text-left text-sm font-medium text-gray-700 mb-1">Quantidade</label>
        <div class="flex items-center">
            <input type="number" id="quantity" placeholder="Ex: 500" step="0.01" min="0" class="flex-grow rounded-r-none">
            <select id="unit" class="rounded-l-none text-gray-600 w-24">
                <option value="kg">kg</option>
                <option value="g">g</option>
                <option value="L">L</option>
                <option value="ml">ml</option>
                <option value="un">un</option>
            </select>
        </div>
    </div>

    <div id="result" class="result-box hidden">
        <p class="result-text">Pre√ßo por unidade</p>
        <p id="price-per-unit" class="result-price">R$ 0,00</p>
    </div>

    <div class="flex space-x-2 mt-6">
        <button id="calculate-btn" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg transition duration-200 ease-in-out transform hover:-translate-y-0.5">
            üìä Calcular
        </button>
        <button id="save-btn" class="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg transition duration-200 ease-in-out transform hover:-translate-y-0.5">
            üíæ Salvar
        </button>
    </div>
    
    <div id="saved-calculations" class="mt-8 text-left">
        <h2 class="text-xl font-semibold text-gray-700 mb-3">Compara√ß√µes Salvas</h2>
        <div id="calculations-list" class="space-y-3"></div>
    </div>

    <div class="mt-8 text-center text-sm text-gray-500">
        <p>‚ú® Encontre o melhor pre√ßo para o seu bolso! ‚ú®</p>
    </div>
</div>

<!-- Custom Alert/Modal -->
<div id="modal-backdrop" class="modal-backdrop">
    <div class="modal-content">
        <h3 id="modal-title" class="font-bold text-lg mb-2"></h3>
        <p id="modal-message" class="text-sm text-gray-600 mb-4"></p>
        <button id="modal-close" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-200">
            OK
        </button>
    </div>
</div>

<script type="module">
    // Configura√ß√£o do Firebase - SUBSTITUA com suas pr√≥prias credenciais
    const firebaseConfig = {
        apiKey: "SUA_API_KEY",
        authDomain: "SEU_PROJETO.firebaseapp.com",
        projectId: "SEU_PROJETO",
        storageBucket: "SEU_PROJETO.firebasestorage.app",
        messagingSenderId: "SEU_SENDER_ID",
        appId: "SEU_APP_ID"
    };

    // Elementos da DOM
    const priceInput = document.getElementById('price');
    const quantityInput = document.getElementById('quantity');
    const unitSelect = document.getElementById('unit');
    const productNameInput = document.getElementById('product-name');
    const calculateBtn = document.getElementById('calculate-btn');
    const saveBtn = document.getElementById('save-btn');
    const resultDiv = document.getElementById('result');
    const pricePerUnitSpan = document.getElementById('price-per-unit');
    const calculationsList = document.getElementById('calculations-list');
    const modalBackdrop = document.getElementById('modal-backdrop');
    const modalTitle = document.getElementById('modal-title');
    const modalMessage = document.getElementById('modal-message');
    const modalCloseBtn = document.getElementById('modal-close');

    // Estado da aplica√ß√£o
    let currentCalculation = null;
    let savedCalculations = [];

    // Fun√ß√£o para mostrar modal
    function showModal(title, message) {
        modalTitle.textContent = title;
        modalMessage.textContent = message;
        modalBackdrop.classList.add('active');
    }

    // Fechar modal
    modalCloseBtn.addEventListener('click', () => {
        modalBackdrop.classList.remove('active');
    });

    // Calcular pre√ßo por unidade
    function calculatePrice() {
        let price = parseFloat(priceInput.value);
        let quantity = parseFloat(quantityInput.value);
        let unit = unitSelect.value;
        let productName = productNameInput.value.trim();
        
        if (!productName) {
            showModal("Aten√ß√£o", "Por favor, informe o nome do produto.");
            return;
        }
        
        if (isNaN(price) || isNaN(quantity) || price <= 0 || quantity <= 0) {
            resultDiv.classList.add('hidden');
            showModal("Dados inv√°lidos", "Por favor, informe pre√ßo e quantidade v√°lidos.");
            return;
        }

        let pricePerUnit = 0;
        let displayUnit = "";
        
        switch (unit) {
            case 'g':
                pricePerUnit = (price / quantity) * 1000;
                displayUnit = "R$/kg";
                break;
            case 'ml':
                pricePerUnit = (price / quantity) * 1000;
                displayUnit = "R$/L";
                break;
            case 'un':
                pricePerUnit = price / quantity;
                displayUnit = "R$/un";
                break;
            case 'kg':
            case 'L':
            default:
                pricePerUnit = price / quantity;
                displayUnit = `R$/${unit}`;
                break;
        }

        const formattedPrice = pricePerUnit.toFixed(2).replace('.', ',');
        pricePerUnitSpan.textContent = `${formattedPrice} ${displayUnit}`;
        resultDiv.classList.remove('hidden');
        
        // Salvar c√°lculo atual para poss√≠vel salvamento
        currentCalculation = {
            productName,
            price,
            quantity,
            unit,
            pricePerUnit,
            displayUnit,
            formattedPrice,
            timestamp: Date.now()
        };
        
        return currentCalculation;
    }

    // Salvar c√°lculo (simulado - substitua com sua l√≥gica do Firebase)
    function saveCalculation() {
        if (!currentCalculation) {
            showModal("Aten√ß√£o", "Calcule primeiro o pre√ßo antes de salvar.");
            return;
        }
        
        // Adicionar √† lista de c√°lculos salvos
        savedCalculations.push(currentCalculation);
        
        // Renderizar a lista
        renderSavedCalculations();
        
        showModal("Sucesso", "C√°lculo salvo com sucesso!");
        
        // Limpar campos
        productNameInput.value = "";
        priceInput.value = "";
        quantityInput.value = "";
        resultDiv.classList.add('hidden');
        currentCalculation = null;
    }

    // Renderizar c√°lculos salvos
    function renderSavedCalculations() {
        calculationsList.innerHTML = '';
        
        if (savedCalculations.length === 0) {
            calculationsList.innerHTML = '<p class="text-gray-500 text-center py-4">Nenhum c√°lculo salvo ainda.</p>';
            return;
        }
        
        // Ordenar por pre√ßo por unidade (menor primeiro)
        savedCalculations.sort((a, b) => a.pricePerUnit - b.pricePerUnit);
        
        savedCalculations.forEach((calc, index) => {
            const item = document.createElement('div');
            item.className = 'calculation-item';
            
            // Destacar a melhor op√ß√£o (mais barata)
            if (index === 0) {
                item.classList.add('best-option');
            }
            
            item.innerHTML = `
                <div class="flex-grow">
                    <div class="flex items-center">
                        <p class="font-medium text-gray-800">${calc.productName}</p>
                        ${index === 0 ? '<span class="best-option-tag">Melhor op√ß√£o</span>' : ''}
                    </div>
                    <p class="text-sm text-gray-600">Pre√ßo: R$ ${calc.price.toFixed(2).replace('.', ',')} | Qtd: ${calc.quantity} ${calc.unit}</p>
                    <p class="text-sm text-blue-600 font-bold">${calc.displayUnit} ${calc.formattedPrice}</p>
                </div>
                <button class="delete-btn" data-id="${calc.timestamp}">X</button>
            `;
            
            const deleteBtn = item.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', () => deleteCalculation(calc.timestamp));
            
            calculationsList.appendChild(item);
        });
    }

    // Deletar c√°lculo
    function deleteCalculation(timestamp) {
        savedCalculations = savedCalculations.filter(calc => calc.timestamp !== timestamp);
        renderSavedCalculations();
    }

    // Event Listeners
    calculateBtn.addEventListener('click', calculatePrice);
    saveBtn.addEventListener('click', saveCalculation);

    // Inicializar a aplica√ß√£o
    document.addEventListener('DOMContentLoaded', () => {
        renderSavedCalculations();
        
        // Adicionar alguns exemplos iniciais
        savedCalculations = [
            {
                productName: "Sab√£o em P√≥ OMO",
                price: 15.90,
                quantity: 1.5,
                unit: "kg",
                pricePerUnit: 10.60,
                displayUnit: "R$/kg",
                formattedPrice: "10,60",
                timestamp: Date.now() - 86400000 // 1 dia atr√°s
            },
            {
                productName: "Sab√£o em P√≥ Brilhante",
                price: 12.00,
                quantity: 1,
                unit: "kg",
                pricePerUnit: 12.00,
                displayUnit: "R$/kg",
                formattedPrice: "12,00",
                timestamp: Date.now() - 43200000 // 12 horas atr√°s
            },
            {
                productName: "Sab√£o em P√≥ Progresso",
                price: 18.50,
                quantity: 2,
                unit: "kg",
                pricePerUnit: 9.25,
                displayUnit: "R$/kg",
                formattedPrice: "9,25",
                timestamp: Date.now() - 21600000 // 6 horas atr√°s
            }
        ];
        
        renderSavedCalculations();
    });

    // Simular funcionalidade offline com service worker
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/service-worker.js')
            .then(registration => {
                console.log('Service Worker registrado com sucesso:', registration);
            })
            .catch(error => {
                console.log('Falha ao registrar Service Worker:', error);
            });
    }
</script>

</body>
</html>
